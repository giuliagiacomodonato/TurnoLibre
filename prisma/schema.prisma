// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String
  role          Role      @default(USER)
  reservations  Reservation[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Sport {
  id            String    @id @default(uuid())
  name          String
  description   String?
  facilities    Facility[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Location {
  id            String    @id @default(uuid())
  name          String
  address       String
  phone         String
  description   String?
  services      String[]  // Array of service names
  facilities    Facility[]
  schedules     LocationSchedule[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model LocationSchedule {
  id            String    @id @default(uuid())
  locationId    String
  location      Location  @relation(fields: [locationId], references: [id])
  dayOfWeek     Int      // 0 = Sunday, 1 = Monday... 6 = Saturday
  isOpen        Boolean   @default(true)
  openingTime   DateTime
  closingTime   DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Facility {
  id            String    @id @default(uuid())
  name          String
  description   String?
  price         Float     // Precio por hora/reserva
  sportId       String
  sport         Sport     @relation(fields: [sportId], references: [id])
  locationId    String
  location      Location  @relation(fields: [locationId], references: [id])
  reservations  Reservation[]
  availability  FacilityAvailability[]
  schedules     FacilitySchedule[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FacilityAvailability {
  id            String    @id @default(uuid())
  facilityId    String
  facility      Facility  @relation(fields: [facilityId], references: [id])
  dayOfWeek     Int      // 0 = Sunday, 1 = Monday... 6 = Saturday
  openingTime   DateTime
  closingTime   DateTime
  slotDuration  Int      // in minutes
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FacilitySchedule {
  id            String    @id @default(uuid())
  facilityId    String
  facility      Facility  @relation(fields: [facilityId], references: [id])
  dayOfWeek     Int?     // null means "Todos los d√≠as"
  openingTime   DateTime
  closingTime   DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Payment {
  id            String    @id @default(uuid())
  amount        Float
  status        PaymentStatus @default(PENDING)
  reservations  Reservation[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Reservation {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  facilityId    String
  facility      Facility  @relation(fields: [facilityId], references: [id])
  paymentId     String?
  payment       Payment?  @relation(fields: [paymentId], references: [id])
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  status        ReservationStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
} 